/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *head  , *prev , *temp1=l1 , *temp2=l2;
        int length1=0 , length2=0;

        while(temp1){
          length1++;
          temp1 = temp1->next;
        }

        while(temp2){
          length2++;
          temp2 = temp2->next;
        }

        if(length1>length2){
          head = temp1 = l1 , temp2 = l2;
        }
        else{
          head = temp1 = l2 , temp2 = l1;
        }
        int carry=0;

        while(temp2!=NULL){
          int digitSum = temp1->val + temp2->val + carry;
          temp1->val = digitSum%10;
          carry = digitSum/10; 
          prev = temp1;
          temp1 = temp1->next , temp2 = temp2->next;  
        }

        while(temp1){
          int digitSum = temp1->val + carry;
          temp1->val = digitSum%10;
          carry = digitSum/10;
          prev = temp1;
          temp1 = temp1->next;
        }

        if(carry>0){
          ListNode *ptr = new ListNode(carry);
          ptr->next = NULL;
          prev->next = ptr;
          cout<<prev->next->val;
        }

        return head;
    }
};
